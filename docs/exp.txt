[1,2,3] (list 1 2 3)
f(10,20) (f 10 20)

(equal? (list  'a 'b ) '(a b)) => #t
'a => (quote a)
(list (quote a) (quote b)) => '(a b)

> (cons 1 2)
(1 . 2)
> (cons 3 (cons 1 2))
(3 1 . 2)
(cons 3 (cons 1 '()) ) )
(3 1)

> '(b . (c . (d . nil)))
(b c d . nil)
(cons b  (cons c  (cons d nil)))

(cons 1 '())
(1)


> (define x '(1 . 2))
#<unspecified>
> (set-cdr! x (cons 2 '()))
#<unspecified>
> x
(1 2)

> (equal? '(a) '(a) )
#t
> (eqv? '(a) '(a) )
#f


void f() {
	return x*x;
}

if(a>b){
	
}

(if (> a b)
	(begin xxx))


#include <stdio.h>

int main(int argc, char** argv) {
  puts("Hello, world!");
  return 0;
}	

变量
函数

scm
c
asm

《鸭语言》

菩萨蛮
问君何事轻离别，一年能几团圆月。
杨柳乍如丝，故园春尽时。
春归归不得，两桨松花隔。
旧事逐寒潮，啼鹃恨未消。

函数对应的语文.



《树木》
移动树木，到三百米。
当到三百米，锯成两段。
裁剪树枝，摘掉树叶。

move(tree),to(300)。
if=300,cut(2)。
cut(branch),takeoff(leaf)。










(let ([fib (lambda (n)
             (let ([var.4 (alloc "fib(%d)")])
               (let ([var.0 (printc var.4 n)])
                 (let ([var.5 (- n 8)]) (tail fib var.5)))))])
  (let ([var.1 fib]) (fib 80)))

==>

(program 'main
  ();; args
  ();; vars

  (program 'fib 
    (n);; args
    (var.4 var.0 var.5 var.1) ;; local global vars
    (alloc "fib(%d)")
    (set var.4 ret)
    (printc var.4 n)
    (set var.0 ret)
    (- n 8)
    (set var.5 ret)
    (call fib var.5)
  )

  (program 'main 
    ();; args
    (var.1 fib) ;; vars
    (set var.1 fib)
    (call fib 80)
  )

)



(let ([fib (lambda (n)
             (let ([var.4 (alloc "fib(%d)")])
               (let ([var.0 (printc var.4 n)])
                 (let ([var.5 (- n 8)]) (tail fib var.5)))))])

=>
(program main () ()
  (program fib (n)
           (var.4 var.0 var.5)
           (alloc "fib(%d)")
    (set var.4 ret)
    (printc var.4 n)
    (set var.0 ret)
    (- n 8)
    (set var.5 ret)
    (tail fib var.5))
  (program main
           ()
           (fib var.1)
           fib
           (set var.1 ret)
           (fib 80))

=>
(program main
  (program fib 
    (set (local 1) ret)
    (printc (local 1) (local 0))
    (set (local 2) ret)
    (- (local 0) 8)
    (set (local 3) ret)
    (tail fib (local 3))
  )
  (program main
    (fib (local 0))
    (set (local 0) ret)
    (fib 80)
  )
)

=>

(program main
  (program fib 
    (mov esp+4 eax)
    (printc (local 1) (local 0))
    (set (local 2) ret)
    (- (local 0) 8)
    (set (local 3) ret)
    (tail fib (local 3))
  )
  (program main
    (fib (local 0))
    (set (local 0) ret)
    (fib 80)
  )
)

=>

(block all
  (block main
    (fib (local 0))
    (set (local 0) ret)
    (fib 80)
  )
  (block fib
    (mov esp+4 eax)
    (printc (local 1) (local 0))
    (set (local 2) ret)
    (- (local 0) 8)
    (set (local 3) ret)
    (tail fib (local 3))
  )
  (block data

  )

)